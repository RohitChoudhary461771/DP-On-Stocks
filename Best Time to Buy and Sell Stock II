// ðŸ‘‰ Memoization-----------------------------------------------------------------------
class Solution {
public:

    int f(vector<int>&prices,int i,int n,int buy,vector<vector<int>>&dp){
        if(i>n){
            return 0;
        }
        if(dp[i][buy]!=-1){
            return dp[i][buy];
        }
        int buy1=0;
        int buy2=0;
        if(buy){
             buy1=-prices[i]+f(prices,i+1,n,0,dp);

             buy2=0+f(prices,i+1,n,1,dp);
        }
        else{
            buy1=prices[i]+f(prices,i+1,n,1,dp);
            buy2=0+f(prices,i+1,n,0,dp);
        }
        return dp[i][buy]=max(buy1,buy2);
    }
    int maxProfit(vector<int>& prices) {
       int n=prices.size();
       vector<vector<int>>dp(n+1,vector<int>(2,-1));
      return f(prices,0,n-1,1,dp);
}
};
// ðŸ‘‰ Tabulation-----------------------------------------------------------------------


int maxProfit(vector<int>& prices) {
       int n=prices.size();
       vector<vector<int>>dp(n+1,vector<int>(2,-1));
    //    return f(prices,0,n-1,1,dp);
    // tabulation 
    dp[n][0]=dp[n][1]=0;
       int profit=0;
       for(int i=n-1;i>=0;i--){
           
        for(int buy=0;buy<2;buy++){
               if(buy==0){
                   profit=max(-prices[i]+dp[i+1][1],0+dp[i+1][0]);
                   
               }else
               {
                   profit=max(prices[i]+dp[i+1][0],0+dp[i+1][1]);
                
               }
               dp[i][buy]=profit;
           }
       }
       return dp[0][0];
    }
};

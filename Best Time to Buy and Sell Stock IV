// â¬‡ðŸ‘‰Memoization
T.C O(N*2*K)
S.C O(N*2*K)+O(N)
class Solution {
public:

    int f(int k,vector<int>& prices,int buy,int cap,int i,int n,vector<vector<vector<int>>>&dp){
        if(i==n || cap==k){
            return 0;
        }
        if(dp[i][buy][cap]!=-1)return dp[i][buy][cap];
        if(buy==0){//we can buy the stock
            return max(-prices[i]+f(k,prices,1,cap,i+1,n,dp),-0+f(k,prices,0,cap,i+1,n,dp));
        }
        else{//we can't buy the stock
            return max(prices[i]+f(k,prices,0,cap+1,i+1,n,dp),0+f(k,prices,1,cap,i+1,n,dp));
        }
    }
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(k,-1)));
       return f(k,prices,0,0,0,n,dp);
    }
};

----------------------------------------------------------------------------------------------------------------------
// â¬‡ðŸ‘‰ Tabulation  
T.C O(N*2*K)
S.C O(N*2*K)

class Solution {
public:
  int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(k+1,0)));

        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                for(int z=1;z<=k;z++){
                    int profit=0;
                    if(j==0){//we can buy the stock
                        profit=max(-prices[i]+dp[i+1][1][z],-0+dp[i+1][0][z]);
                    }
                    else{//we can't buy the stock
                        profit=max(prices[i]+dp[i+1][0][z-1],-0+dp[i+1][1][z]);

                    }
                    dp[i][j][z]=profit;
                }
            }
        }
        return dp[0][0][k];
        
    }
};

------------------------------------------------------------------------------------------
// â¬‡ðŸ‘‰ Space Optimization

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {

    int n=prices.size();
    vector<vector<int>>front(2,vector<int>(k+1,0));
    vector<vector<int>>cur(2,vector<int>(k+1,0));

    for(int i=n-1;i>=0;i--){
        for(int j=0;j<2;j++){
            for(int z=1;z<=k;z++){
                int profit=0;
                if(j==0){
                    cur[j][z]=max(front[1][z]-prices[i],front[0][z]+0);
                }
                else{
                    cur[j][z]=max(front[0][z-1]+prices[i],front[1][z]+0);
                }

            }
        }
        front=cur;
    }
    return front[0][k];
    }
};

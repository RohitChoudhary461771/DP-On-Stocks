ðŸ‘‰ Memoization
  T.C O(N*2)
  S.C O(N*2)+O(N)

class Solution {
public:
    int f(vector<int>& prices,int i,int n,int buy,int fee,vector<vector<int>>&dp){
        if(i==n)return 0;

        if(dp[i][buy]!=-1)return dp[i][buy];
        if(buy==0){
            return dp[i][buy]=max(-prices[i]+f(prices,i+1,n,1,fee,dp),f(prices,i+1,n,0,fee,dp));
        }
        else{
            return dp[i][buy]=max(prices[i]+f(prices,i+1,n,0,fee,dp)-fee,f(prices,i+1,n,1,fee,dp));
        }
    }
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
         vector<vector<int>>dp(n,vector<int>(2,-1));
        return f(prices,0,n,0,fee,dp);
}
};


--------------------------------------------------------------------------------------------------
ðŸ‘‰Tabulatiion
    T.C O(N*2) 
    S.C O(N*2)

class Solution {
public:
vector<vector<int>>dp(n+1,vector<int>(2,0));

       for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j==0){
                    dp[i][j]=max(-prices[i]+dp[i+1][1],dp[i+1][0]);
                }
                else{
                    dp[i][j]=max(prices[i]-fee+dp[i+1][0],dp[i+1][1]);
                }
            }
        }
      return  dp[0][0];
    }
};
--------------------------------------------------------------------------------------------------
ðŸ‘‰ space optimization
    T.C O(N*2) 
    S.C O(2)+O(2)

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
         vector<int>front(2,0);
         vector<int>cur(2,0);

        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j==0){
                    cur[j]=max(-prices[i]+front[1],front[0]);
                }
                else{
                    cur[j]=max(prices[i]-fee+front[0],front[1]);
                }
            }
            front=cur;
        }
      return  cur[0];
    }
};

//ðŸ‘‰Memoization --------------------------------------------------------------------------------
class Solution {
public:
int f(vector<int>& prices,int i ,int n,int buy,int cap,vector<vector<vector<int>>>&dp){
    if(i==n||cap==2)return 0;

    if(buy==1){
        return dp[i][buy][cap]= max((f(prices,i+1,n,0,cap,dp)-prices[i]),(f(prices,i+1,n,1,cap,dp)-0));

    }
    else{
        return dp[i][buy][cap]= max((f(prices,i+1,n,1,cap+1,dp)+prices[i]),f(prices,i+1,n,0,cap,dp));
    }
}
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(2,-1)));
        return f(prices,0,n,1,0,dp);
    }
};

//ðŸ‘‰Tabulation --------------------------------------------------------------------------------
class Solution {
public:

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
       
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                for(int k=1;k<3;k++){
                    
                    if(j==0){
                         dp[i][j][k]=max((dp[i+1][1][k]-prices[i]),dp[i+1][0][k]);
                    
                    }
                    else{
                         dp[i][j][k]=max((dp[i+1][0][k-1]+prices[i]),dp[i+1][1][k]);
                    }
                   
                }
            }
        }
        return dp[0][0][2];
    }
};
